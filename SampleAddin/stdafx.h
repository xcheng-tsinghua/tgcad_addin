// stdafx.h : include file for standard system include files,
//      or project specific include files that are used frequently,
//      but are changed infrequently

#if !defined(AFX_STDAFX_H__B6EB58F3_E978_11D0_B9E9_080036230602__INCLUDED_)
#define AFX_STDAFX_H__B6EB58F3_E978_11D0_B9E9_080036230602__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#ifndef __FILET__
#define __DUILIB_STR2WSTR(str)	L##str
#define _DUILIB_STR2WSTR(str)	__DUILIB_STR2WSTR(str)
#ifdef _UNICODE
#define __FILET__	_DUILIB_STR2WSTR(__FILE__)
#define __FUNCTIONT__	_DUILIB_STR2WSTR(__FUNCTION__)
#else
#define __FILET__	__FILE__
#define __FUNCTIONT__	__FUNCTION__
#endif
#endif

#define _CRT_SECURE_NO_DEPRECATE

// Remove pointless warning messages
#ifdef _MSC_VER
#pragma warning (disable : 4511) // copy operator could not be generated
#pragma warning (disable : 4512) // assignment operator could not be generated
#pragma warning (disable : 4702) // unreachable code (bugs in Microsoft's STL)
#pragma warning (disable : 4786) // identifier was truncated
#pragma warning (disable : 4996) // function or variable may be unsafe (deprecated)
#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS // eliminate deprecation warnings for VS2005
#endif
#endif // _MSC_VER
#ifdef __BORLANDC__
#pragma option -w-8027		   // function not expanded inline
#endif

// Required for VS 2008 (fails on XP and Win2000 without this fix)
#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0603
#endif

#include <afxwin.h>

#include <olectl.h>

#define lengthof(x) (sizeof(x)/sizeof(*x))
#define MAX max
#define MIN min
#define CLAMP(x,a,b) (MIN(b,MAX(a,x)))

#ifdef _INC_WINDOWSX
#undef SelectFont
#undef SelectPen
#endif // _INC_WINDOWSX

//#include <objbase.h>
//#include <string>
//#include <vector>
//#include <map>
//#include <set>
//#include <windows.h>
//#include <commctrl.h>
//#include <tchar.h>
//#include <shlwapi.h>
//#include <list>


////////////////////////////////////////////////////////////////////////////////////////////

#define STRICT

#ifndef _SECURE_ATL
#define _SECURE_ATL 1
#endif

#ifndef VC_EXTRALEAN
#define VC_EXTRALEAN		// Exclude rarely-used stuff from Windows headers
#endif

// Modify the following defines if you have to target a platform prior to the ones specified below.
// Refer to MSDN for the latest info on corresponding values for different platforms.
#ifndef WINVER				// Allow use of features specific to Windows XP or later.
#define WINVER 0x0501		// Change this to the appropriate value to target other versions of Windows.
#endif

#ifndef _WIN32_WINNT		// Allow use of features specific to Windows XP or later.                   
#define _WIN32_WINNT 0x0501	// Change this to the appropriate value to target other versions of Windows.
#endif						

#ifndef _WIN32_WINDOWS		// Allow use of features specific to Windows 98 or later.
#define _WIN32_WINDOWS 0x0410 // Change this to the appropriate value to target Windows Me or later.
#endif

#ifndef _WIN32_IE			// Allow use of features specific to IE 6.0 or later.
#define _WIN32_IE 0x0600	// Change this to the appropriate value to target other versions of IE.
#endif

#define _ATL_CSTRING_EXPLICIT_CONSTRUCTORS	// some CString constructors will be explicit

// turns off MFC's hiding of some common and often safely ignored warning messages
#define _AFX_ALL_WARNINGS

#include <afxwin.h>
#include <afxdisp.h>
#include <afxtempl.h>

#ifndef _AFX_NO_AFXCMN_SUPPORT
#include <afxcmn.h>             // MFC 对 Windows 公共控件的支持
#endif // _AFX_NO_AFXCMN_SUPPORT

#define _ATL_APARTMENT_THREADED


#include <atlbase.h>
#include <atlsafe.h>
//You may derive a class from CComModule and use it if you want to override
//something, but do not change the name of _Module
extern CComModule _Module;
#include <atlcom.h>
#include <afxdisp.h> // CG: added by ActiveX Control Containment component
#include <afxdisp.h> // CG: added by ActiveX Control Containment component
#include <atlsafe.h>

#include <vector>
#include <map>
#include <set>
#include <algorithm>

#pragma warning (disable : 4786 )



#import "./SDK/lib/constant.tlb"
// Note the exclude below was brought about because of an old Microsoft bug that caused
// incorrect (and complier error generating) definitions of the typedefs I am excluding
// to be inserted into the files generated by the import (import generates a .tli and .tlh file).
// I tried with Visual Studio 2008 to remove the exclude but I got an ambiguous symbol error
// even though looking at the .tli and .tlh file I failed to find any #define or #typedef
// in the files.
// Also, there is a GetOpenFileName in the Windows API and so I use the rename attribute
// to avoid a warning during compilation. I have seen that warning on earlier versions of MFC
// so I choose to leave it here. Just be aware of the name change if you ever need to call
// the method on the application object.
#import "./SDK/lib/framewrk.tlb" exclude ("UINT_PTR", "LONG_PTR") rename ("GetOpenFileName", "SEGetOpenFileName")
#import "./SDK/lib/fwksupp.tlb"

#import "./SDK/lib/geometry.tlb"
#import "./SDK/lib/part.tlb"
#import "./SDK/lib/assembly.tlb"
#import "./SDK/lib/draft.tlb"

using namespace SolidEdgeFramework;
using namespace SolidEdgeAssembly;
using namespace SolidEdgeFrameworkSupport;
//using namespace SolidEdgeGeometry;
using namespace SolidEdgePart;

#define C_RELEASE(x) if( NULL != x ) { x->Release(); x = NULL; }

AddInPtr GetAddInPtr();
ApplicationPtr GetApplicationPtr();

// Use this function to access the handle to the addin's instance.
HINSTANCE hMyInstance();

#include "hlp\SampleAddinhelp.h"

HWND WINAPI AddinHtmlHelpA (
    HWND hwndCaller,
    LPCSTR pszFile,
    UINT uCommand,
    DWORD_PTR dwData
    );

HWND WINAPI AddinHtmlHelpW (
    HWND hwndCaller,
    LPCWSTR pszFile,
    UINT uCommand,
    DWORD_PTR dwData
    );
#ifdef UNICODE
#define AddinHtmlHelp  AddinHtmlHelpW
#else
#define AddinHtmlHelp  AddinHtmlHelpA
#endif // !UNICODE

STDAPI RegisterSEAddIn( 
                       CLSID AddInCLSID,              // Class ID of the relevant class
                       BOOL bAutoConnect,             // Auto connect indicator
                       LCID lcid,                     // Locale ID of addin's description.
                       TCHAR *szDescription,          // Locale specific addin description
                       TCHAR *szSummary,              // Locale specific addin summary
                       TCHAR *szHelpFilename,         // Name of help file
                       DWORD dwHelpContext,           // Default help context used by SE AddIn Manager
                       TCHAR *szHelpTopic,            // Default help topic used by SE AddIn Manager
                       ULONG cReqCategories,          // Number of required categories
                       CATID* pReqCategories,         // Array of cReqCategories required by the addin
                       ULONG cEnvironmentCategories,  // Number of SE environments addin supplies commands for
                       CATID* pEnvironmentCategories, // Array of SE environment categories
                       ULONG cPropertySets,           // Number of property sets addin might define
                       FMTID* pPropertySetFmtids );   // Array of property set identifiers

STDAPI UnRegisterSEAddIn( 
                         CLSID AddInCLSID,              // Class ID of the relevant class
                         ULONG cReqCategories,          // Number of required categories
                         CATID* pReqCategories,         // Array of cReqCategories required by the addin
                         ULONG cEnvironmentCategories,  // Number of SE environments addin supplies commands for
                         CATID* pEnvironmentCategories, // Array of SE environment categories
                         ULONG cPropertySets,           // Number of property sets addin might define
                         FMTID* pPropertySetFmtids );   // Array of property set identifiers

long GetLocTestCmdId();
long GetLocTestShortCutMenuCmdId();

/////////////////////////////////////////////////////////////////////////////
// Debugging support

// Use VERIFY_OK around all calls to the Solid Edge objects which
//  you expect to return S_OK.
// In DEBUG builds of your add-in, VERIFY_OK displays an ASSERT dialog box
//  if the expression returns an HRESULT other than S_OK.  If the HRESULT
//  is a success code, the ASSERT box will display that HRESULT.  If it
//  is a failure code, the ASSERT box will display that HRESULT plus the
//  error description string provided by the object which raised the error.
// In RETAIL builds of your add-in, VERIFY_OK just evaluates the expression
//  and ignores the returned HRESULT.

#ifdef _DEBUG

void GetLastErrorDescription(CComBSTR& bstr);
#define VERIFY_OK(f) \
	{ \
		HRESULT hr = (f); \
		if (hr != S_OK) \
		{ \
			if (FAILED(hr)) \
			{ \
				CComBSTR bstr; \
				GetLastErrorDescription(bstr); \
				_RPTF2(_CRT_ASSERT, "Object call returned %lx\n\n%S", hr, (BSTR) bstr); \
			} \
			else \
				_RPTF1(_CRT_ASSERT, "Object call returned %lx", hr); \
		} \
	}

#else //_DEBUG

#define VERIFY_OK(f) (f);

#endif //_DEBUG

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__B6EB58F3_E978_11D0_B9E9_080036230602__INCLUDED)
